2025-05-26 19:01:34,468 DeMo INFO: Saving model in the path :./MSVR310-DeMo/ebblockdeformgatedfuzarerank_20250526_190130
2025-05-26 19:01:34,469 DeMo INFO: Namespace(config_file='configs/MSVR310/DeMo.yml', fea_cft=0, local_rank=0, opts=['OUTPUT_DIR', './MSVR310-DeMo/ebblockdeformgatedfuzarerank_20250526_190130'])
2025-05-26 19:01:34,469 DeMo INFO: Loaded configuration file configs/MSVR310/DeMo.yml
2025-05-26 19:01:34,469 DeMo INFO: 
MODEL:
  TRANSFORMER_TYPE: 'ViT-B-16'
  STRIDE_SIZE: [ 16, 16 ]
  SIE_CAMERA: True
  DIRECT: 0
  SIE_COE: 1.0
  ID_LOSS_WEIGHT: 0.25
  TRIPLET_LOSS_WEIGHT: 1.0
  GLOBAL_LOCAL: True
  HDM: True
  ATM: True
  HEAD: 8

INPUT:
  SIZE_TRAIN: [ 128, 256 ]
  SIZE_TEST: [ 128, 256 ]
  PROB: 0.5 # random horizontal flip
  RE_PROB: 0.5 # random erasing
  PADDING: 10

DATALOADER:
  SAMPLER: 'softmax_triplet'
  NUM_INSTANCE: 4
  NUM_WORKERS: 14

DATASETS:
  NAMES: ('MSVR310')
  ROOT_DIR: '..'

SOLVER:
  BASE_LR: 0.00035
  WARMUP_ITERS: 10
  MAX_EPOCHS: 50
  OPTIMIZER_NAME: 'Adam'
  GAMMA: 0.1
  IMS_PER_BATCH: 64
  EVAL_PERIOD: 1

TEST:
  IMS_PER_BATCH: 64
  RE_RANKING: 'no'
  WEIGHT: ''
  NECK_FEAT: 'before'
  FEAT_NORM: 'yes'
  MISS: "nothing"

OUTPUT_DIR: '..'


2025-05-26 19:01:34,470 DeMo INFO: Running with config:
DATALOADER:
  NUM_INSTANCE: 4
  NUM_WORKERS: 14
  SAMPLER: softmax_triplet
DATASETS:
  NAMES: MSVR310
  ROOT_DIR: ..
INPUT:
  PADDING: 10
  PIXEL_MEAN: [0.5, 0.5, 0.5]
  PIXEL_STD: [0.5, 0.5, 0.5]
  PROB: 0.5
  RE_PROB: 0.5
  SIZE_TEST: [128, 256]
  SIZE_TRAIN: [128, 256]
MODEL:
  ADAPTER: False
  ATM: True
  ATT_DROP_RATE: 0.0
  DEVICE: cuda
  DEVICE_ID: 0
  DIRECT: 0
  DIST_TRAIN: False
  DROP_OUT: 0.0
  DROP_PATH: 0.1
  FROZEN: False
  GLOBAL_LOCAL: True
  HDM: True
  HEAD: 8
  ID_LOSS_TYPE: softmax
  ID_LOSS_WEIGHT: 0.25
  IF_LABELSMOOTH: on
  IF_WITH_CENTER: no
  METRIC_LOSS_TYPE: triplet
  NAME: DeMo
  NECK: bnneck
  NO_MARGIN: True
  PRETRAIN_PATH_T: /path/to/your/vitb_16_224_21k.pth
  PROMPT: False
  SIE_CAMERA: True
  SIE_COE: 1.0
  SIE_VIEW: False
  STRIDE_SIZE: [16, 16]
  TRANSFORMER_TYPE: ViT-B-16
  TRIPLET_LOSS_WEIGHT: 1.0
OUTPUT_DIR: ./MSVR310-DeMo/ebblockdeformgatedfuzarerank_20250526_190130
SOLVER:
  BASE_LR: 0.00035
  BIAS_LR_FACTOR: 2
  CENTER_LOSS_WEIGHT: 0.0005
  CENTER_LR: 0.5
  CHECKPOINT_PERIOD: 60
  CLUSTER_MARGIN: 0.3
  COSINE_MARGIN: 0.5
  COSINE_SCALE: 30
  EVAL_PERIOD: 1
  GAMMA: 0.1
  IMS_PER_BATCH: 64
  LARGE_FC_LR: False
  LOG_PERIOD: 10
  MARGIN: 0.3
  MAX_EPOCHS: 50
  MOMENTUM: 0.9
  OPTIMIZER_NAME: Adam
  RANGE_ALPHA: 0
  RANGE_BETA: 1
  RANGE_K: 2
  RANGE_LOSS_WEIGHT: 1
  RANGE_MARGIN: 0.3
  SEED: 1111
  STEPS: (40, 70)
  WARMUP_FACTOR: 0.01
  WARMUP_ITERS: 10
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
TEST:
  FEAT: 0
  FEAT_NORM: yes
  IMS_PER_BATCH: 64
  MISS: nothing
  NECK_FEAT: before
  RE_RANKING: no
  WEIGHT: 
=> RGB_IR loaded
Dataset statistics:
  ----------------------------------------
  subset   | # ids | # images | # cameras
  ----------------------------------------
  train    |   155 |     1032 |         8
  query    |    52 |      591 |         8
  gallery  |   155 |     1055 |         8
  ----------------------------------------
data is ready
using Transformer_type: ViT-B-16 as a backbone
Resized position embedding: %s to %s torch.Size([197, 768]) torch.Size([129, 768])
Position embedding resize to height:8 width: 16
Successfully load ckpt!
_IncompatibleKeys(missing_keys=['visual.triple_dff.fc_atten1.0.weight', 'visual.triple_dff.fc_atten1.1.weight', 'visual.triple_dff.fc_atten1.1.bias', 'visual.triple_dff.fc_atten2.0.weight', 'visual.triple_dff.fc_atten2.1.weight', 'visual.triple_dff.fc_atten2.1.bias', 'visual.triple_dff.fc_atten4.0.weight', 'visual.triple_dff.fc_atten4.1.weight', 'visual.triple_dff.fc_atten4.1.bias', 'visual.triple_dff.input_weight_net.0.weight', 'visual.triple_dff.input_weight_net.0.bias', 'visual.triple_dff.input_weight_net.2.weight', 'visual.triple_dff.input_weight_net.2.bias', 'visual.triple_dff.gate_fc.0.weight', 'visual.triple_dff.gate_enhancement.0.weight', 'visual.triple_dff.gate_enhancement.0.bias', 'visual.triple_dff.fc_redu.0.weight', 'visual.triple_dff.fc_redu.1.weight', 'visual.triple_dff.fc_redu.1.bias', 'visual.triple_dff.residual_fc1.0.weight', 'visual.triple_dff.residual_fc1.1.weight', 'visual.triple_dff.residual_fc1.1.bias', 'visual.triple_dff.residual_fc2.0.weight', 'visual.triple_dff.residual_fc2.1.weight', 'visual.triple_dff.residual_fc2.1.bias', 'visual.triple_dff.residual_fc3.0.weight', 'visual.triple_dff.residual_fc3.1.weight', 'visual.triple_dff.residual_fc3.1.bias', 'visual.triple_dff.residual_fusion.0.weight', 'visual.triple_dff.residual_fusion.1.weight', 'visual.triple_dff.residual_fusion.1.bias', 'visual.triple_dff.fc1.weight', 'visual.triple_dff.fc1.bias', 'visual.triple_dff.fc2.weight', 'visual.triple_dff.fc2.bias', 'visual.triple_dff.fc3.weight', 'visual.triple_dff.fc3.bias', 'visual.triple_dff.attention_fusion.0.weight', 'visual.triple_dff.attention_fusion.0.bias', 'visual.quad_dffs.stage1_triple_dff.fc_atten1.0.weight', 'visual.quad_dffs.stage1_triple_dff.fc_atten1.1.weight', 'visual.quad_dffs.stage1_triple_dff.fc_atten1.1.bias', 'visual.quad_dffs.stage1_triple_dff.fc_atten2.0.weight', 'visual.quad_dffs.stage1_triple_dff.fc_atten2.1.weight', 'visual.quad_dffs.stage1_triple_dff.fc_atten2.1.bias', 'visual.quad_dffs.stage1_triple_dff.fc_atten4.0.weight', 'visual.quad_dffs.stage1_triple_dff.fc_atten4.1.weight', 'visual.quad_dffs.stage1_triple_dff.fc_atten4.1.bias', 'visual.quad_dffs.stage1_triple_dff.input_weight_net.0.weight', 'visual.quad_dffs.stage1_triple_dff.input_weight_net.0.bias', 'visual.quad_dffs.stage1_triple_dff.input_weight_net.2.weight', 'visual.quad_dffs.stage1_triple_dff.input_weight_net.2.bias', 'visual.quad_dffs.stage1_triple_dff.gate_fc.0.weight', 'visual.quad_dffs.stage1_triple_dff.gate_enhancement.0.weight', 'visual.quad_dffs.stage1_triple_dff.gate_enhancement.0.bias', 'visual.quad_dffs.stage1_triple_dff.fc_redu.0.weight', 'visual.quad_dffs.stage1_triple_dff.fc_redu.1.weight', 'visual.quad_dffs.stage1_triple_dff.fc_redu.1.bias', 'visual.quad_dffs.stage1_triple_dff.residual_fc1.0.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fc1.1.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fc1.1.bias', 'visual.quad_dffs.stage1_triple_dff.residual_fc2.0.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fc2.1.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fc2.1.bias', 'visual.quad_dffs.stage1_triple_dff.residual_fc3.0.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fc3.1.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fc3.1.bias', 'visual.quad_dffs.stage1_triple_dff.residual_fusion.0.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fusion.1.weight', 'visual.quad_dffs.stage1_triple_dff.residual_fusion.1.bias', 'visual.quad_dffs.stage1_triple_dff.fc1.weight', 'visual.quad_dffs.stage1_triple_dff.fc1.bias', 'visual.quad_dffs.stage1_triple_dff.fc2.weight', 'visual.quad_dffs.stage1_triple_dff.fc2.bias', 'visual.quad_dffs.stage1_triple_dff.fc3.weight', 'visual.quad_dffs.stage1_triple_dff.fc3.bias', 'visual.quad_dffs.stage1_triple_dff.attention_fusion.0.weight', 'visual.quad_dffs.stage1_triple_dff.attention_fusion.0.bias', 'visual.quad_dffs.stage1_enhancement.0.weight', 'visual.quad_dffs.stage1_enhancement.0.bias', 'visual.quad_dffs.stage1_enhancement.1.weight', 'visual.quad_dffs.stage1_enhancement.1.bias', 'visual.quad_dffs.stage1_enhancement.3.weight', 'visual.quad_dffs.stage1_enhancement.3.bias', 'visual.quad_dffs.stage1_enhancement.5.weight', 'visual.quad_dffs.stage1_enhancement.5.bias', 'visual.quad_dffs.input4_preprocessing.0.weight', 'visual.quad_dffs.input4_preprocessing.0.bias', 'visual.quad_dffs.input4_preprocessing.1.weight', 'visual.quad_dffs.input4_preprocessing.1.bias', 'visual.quad_dffs.input4_preprocessing.3.weight', 'visual.quad_dffs.input4_preprocessing.3.bias', 'visual.quad_dffs.input4_preprocessing.4.weight', 'visual.quad_dffs.input4_preprocessing.4.bias', 'visual.quad_dffs.cross_stage_attention.0.weight', 'visual.quad_dffs.cross_stage_attention.0.bias', 'visual.quad_dffs.cross_stage_attention.2.weight', 'visual.quad_dffs.cross_stage_attention.2.bias', 'visual.quad_dffs.adaptive_fusion_weight.0.weight', 'visual.quad_dffs.adaptive_fusion_weight.0.bias', 'visual.quad_dffs.adaptive_fusion_weight.2.weight', 'visual.quad_dffs.adaptive_fusion_weight.2.bias', 'visual.quad_dffs.stage2_dff.fc_atten1.0.weight', 'visual.quad_dffs.stage2_dff.fc_atten2.0.weight', 'visual.quad_dffs.stage2_dff.fc_atten3.0.weight', 'visual.quad_dffs.stage2_dff.gate_fc.0.weight', 'visual.quad_dffs.stage2_dff.fc_redu.weight', 'visual.quad_dffs.stage2_dff.residual_fc.weight', 'visual.quad_dffs.stage2_dff.fc1.weight', 'visual.quad_dffs.stage2_dff.fc1.bias', 'visual.quad_dffs.stage2_dff.fc2.weight', 'visual.quad_dffs.stage2_dff.fc2.bias', 'visual.quad_dffs.memory_input1.weight', 'visual.quad_dffs.memory_input4.weight', 'visual.quad_dffs.memory_fusion.0.weight', 'visual.quad_dffs.memory_fusion.1.weight', 'visual.quad_dffs.memory_fusion.1.bias', 'visual.quad_dffs.global_context.0.weight', 'visual.quad_dffs.global_context.0.bias', 'visual.quad_dffs.global_context.2.weight', 'visual.quad_dffs.global_context.2.bias', 'visual.quad_dffs.final_refinement.0.weight', 'visual.quad_dffs.final_refinement.0.bias', 'visual.quad_dffs.final_refinement.1.weight', 'visual.quad_dffs.final_refinement.1.bias', 'visual.quad_dffs.final_refinement.3.weight', 'visual.quad_dffs.final_refinement.3.bias', 'visual.quad_dffs.final_refinement.4.weight', 'visual.quad_dffs.final_refinement.4.bias', 'visual.gated_enhancement.rgb_gating.residual_weight', 'visual.gated_enhancement.rgb_gating.cross_modal_attention.q_proj.weight', 'visual.gated_enhancement.rgb_gating.cross_modal_attention.k_proj.weight', 'visual.gated_enhancement.rgb_gating.cross_modal_attention.v_proj.weight', 'visual.gated_enhancement.rgb_gating.cross_modal_attention.out_proj.weight', 'visual.gated_enhancement.rgb_gating.cross_modal_attention.out_proj.bias', 'visual.gated_enhancement.rgb_gating.channel_gate.0.weight', 'visual.gated_enhancement.rgb_gating.channel_gate.0.bias', 'visual.gated_enhancement.rgb_gating.channel_gate.2.weight', 'visual.gated_enhancement.rgb_gating.channel_gate.2.bias', 'visual.gated_enhancement.rgb_gating.spatial_gate.0.weight', 'visual.gated_enhancement.rgb_gating.spatial_gate.0.bias', 'visual.gated_enhancement.rgb_gating.spatial_gate.2.weight', 'visual.gated_enhancement.rgb_gating.spatial_gate.2.bias', 'visual.gated_enhancement.rgb_gating.feature_fusion.0.weight', 'visual.gated_enhancement.rgb_gating.feature_fusion.0.bias', 'visual.gated_enhancement.rgb_gating.feature_fusion.1.weight', 'visual.gated_enhancement.rgb_gating.feature_fusion.1.bias', 'visual.gated_enhancement.rgb_gating.feature_fusion.3.weight', 'visual.gated_enhancement.rgb_gating.feature_fusion.3.bias', 'visual.gated_enhancement.rgb_gating.feature_fusion.4.weight', 'visual.gated_enhancement.rgb_gating.feature_fusion.4.bias', 'visual.gated_enhancement.rgb_gating.adaptive_weight.0.weight', 'visual.gated_enhancement.rgb_gating.adaptive_weight.0.bias', 'visual.gated_enhancement.rgb_gating.adaptive_weight.2.weight', 'visual.gated_enhancement.rgb_gating.adaptive_weight.2.bias', 'visual.gated_enhancement.nir_gating.residual_weight', 'visual.gated_enhancement.nir_gating.cross_modal_attention.q_proj.weight', 'visual.gated_enhancement.nir_gating.cross_modal_attention.k_proj.weight', 'visual.gated_enhancement.nir_gating.cross_modal_attention.v_proj.weight', 'visual.gated_enhancement.nir_gating.cross_modal_attention.out_proj.weight', 'visual.gated_enhancement.nir_gating.cross_modal_attention.out_proj.bias', 'visual.gated_enhancement.nir_gating.channel_gate.0.weight', 'visual.gated_enhancement.nir_gating.channel_gate.0.bias', 'visual.gated_enhancement.nir_gating.channel_gate.2.weight', 'visual.gated_enhancement.nir_gating.channel_gate.2.bias', 'visual.gated_enhancement.nir_gating.spatial_gate.0.weight', 'visual.gated_enhancement.nir_gating.spatial_gate.0.bias', 'visual.gated_enhancement.nir_gating.spatial_gate.2.weight', 'visual.gated_enhancement.nir_gating.spatial_gate.2.bias', 'visual.gated_enhancement.nir_gating.feature_fusion.0.weight', 'visual.gated_enhancement.nir_gating.feature_fusion.0.bias', 'visual.gated_enhancement.nir_gating.feature_fusion.1.weight', 'visual.gated_enhancement.nir_gating.feature_fusion.1.bias', 'visual.gated_enhancement.nir_gating.feature_fusion.3.weight', 'visual.gated_enhancement.nir_gating.feature_fusion.3.bias', 'visual.gated_enhancement.nir_gating.feature_fusion.4.weight', 'visual.gated_enhancement.nir_gating.feature_fusion.4.bias', 'visual.gated_enhancement.nir_gating.adaptive_weight.0.weight', 'visual.gated_enhancement.nir_gating.adaptive_weight.0.bias', 'visual.gated_enhancement.nir_gating.adaptive_weight.2.weight', 'visual.gated_enhancement.nir_gating.adaptive_weight.2.bias', 'visual.gated_enhancement.tir_gating.residual_weight', 'visual.gated_enhancement.tir_gating.cross_modal_attention.q_proj.weight', 'visual.gated_enhancement.tir_gating.cross_modal_attention.k_proj.weight', 'visual.gated_enhancement.tir_gating.cross_modal_attention.v_proj.weight', 'visual.gated_enhancement.tir_gating.cross_modal_attention.out_proj.weight', 'visual.gated_enhancement.tir_gating.cross_modal_attention.out_proj.bias', 'visual.gated_enhancement.tir_gating.channel_gate.0.weight', 'visual.gated_enhancement.tir_gating.channel_gate.0.bias', 'visual.gated_enhancement.tir_gating.channel_gate.2.weight', 'visual.gated_enhancement.tir_gating.channel_gate.2.bias', 'visual.gated_enhancement.tir_gating.spatial_gate.0.weight', 'visual.gated_enhancement.tir_gating.spatial_gate.0.bias', 'visual.gated_enhancement.tir_gating.spatial_gate.2.weight', 'visual.gated_enhancement.tir_gating.spatial_gate.2.bias', 'visual.gated_enhancement.tir_gating.feature_fusion.0.weight', 'visual.gated_enhancement.tir_gating.feature_fusion.0.bias', 'visual.gated_enhancement.tir_gating.feature_fusion.1.weight', 'visual.gated_enhancement.tir_gating.feature_fusion.1.bias', 'visual.gated_enhancement.tir_gating.feature_fusion.3.weight', 'visual.gated_enhancement.tir_gating.feature_fusion.3.bias', 'visual.gated_enhancement.tir_gating.feature_fusion.4.weight', 'visual.gated_enhancement.tir_gating.feature_fusion.4.bias', 'visual.gated_enhancement.tir_gating.adaptive_weight.0.weight', 'visual.gated_enhancement.tir_gating.adaptive_weight.0.bias', 'visual.gated_enhancement.tir_gating.adaptive_weight.2.weight', 'visual.gated_enhancement.tir_gating.adaptive_weight.2.bias', 'visual.gated_enhancement.global_coordination.interaction_net.0.weight', 'visual.gated_enhancement.global_coordination.interaction_net.0.bias', 'visual.gated_enhancement.global_coordination.interaction_net.1.weight', 'visual.gated_enhancement.global_coordination.interaction_net.1.bias', 'visual.gated_enhancement.global_coordination.interaction_net.3.weight', 'visual.gated_enhancement.global_coordination.interaction_net.3.bias', 'visual.gated_enhancement.global_coordination.interaction_net.4.weight', 'visual.gated_enhancement.global_coordination.interaction_net.4.bias', 'visual.gated_enhancement.global_coordination.balance_net.0.weight', 'visual.gated_enhancement.global_coordination.balance_net.0.bias', 'visual.gated_enhancement.global_coordination.balance_net.2.weight', 'visual.gated_enhancement.global_coordination.balance_net.2.bias', 'visual.gated_enhancement.global_coordination.global_gate.0.weight', 'visual.gated_enhancement.global_coordination.global_gate.0.bias', 'visual.gated_enhancement.global_coordination.global_gate.2.weight', 'visual.gated_enhancement.global_coordination.global_gate.2.bias'], unexpected_keys=[])
Loading pretrained model from CLIP
camera number is : 8
combineway: ebblockdeform
2025-05-26 19:01:43,112 DeMo INFO: combineway: ebblockdeform
===========Building DeMo===========
2025-05-26 19:01:43,184 DeMo INFO: DeMo(
  (BACKBONE): build_transformer_new(
    (base): VisionTransformer(
      (conv1): Conv2d(3, 768, kernel_size=(16, 16), stride=(16, 16), bias=False)
      (ln_pre): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      (transformer): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
      (ln_post): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
      (triple_dff): TripleInputDirectDFF(
        (avg_pool1): AdaptiveAvgPool1d(output_size=1)
        (avg_pool2): AdaptiveAvgPool1d(output_size=2)
        (avg_pool4): AdaptiveAvgPool1d(output_size=4)
        (fc_atten1): Sequential(
          (0): Linear(in_features=2304, out_features=2304, bias=False)
          (1): LayerNorm((2304,), eps=1e-05, elementwise_affine=True)
          (2): Sigmoid()
        )
        (fc_atten2): Sequential(
          (0): Linear(in_features=2304, out_features=2304, bias=False)
          (1): LayerNorm((2304,), eps=1e-05, elementwise_affine=True)
          (2): Sigmoid()
        )
        (fc_atten4): Sequential(
          (0): Linear(in_features=2304, out_features=2304, bias=False)
          (1): LayerNorm((2304,), eps=1e-05, elementwise_affine=True)
          (2): Sigmoid()
        )
        (input_weight_net): Sequential(
          (0): Linear(in_features=2304, out_features=768, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=768, out_features=3, bias=True)
          (3): Softmax(dim=-1)
        )
        (gate_fc): Sequential(
          (0): Linear(in_features=2304, out_features=2304, bias=False)
          (1): Sigmoid()
        )
        (gate_enhancement): Sequential(
          (0): Linear(in_features=2304, out_features=2304, bias=True)
          (1): Tanh()
        )
        (fc_redu): Sequential(
          (0): Linear(in_features=2304, out_features=768, bias=False)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (2): ReLU(inplace=True)
        )
        (residual_fc1): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=False)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
        (residual_fc2): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=False)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
        (residual_fc3): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=False)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
        (residual_fusion): Sequential(
          (0): Linear(in_features=2304, out_features=768, bias=False)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
        (fc1): Linear(in_features=768, out_features=1, bias=True)
        (fc2): Linear(in_features=768, out_features=1, bias=True)
        (fc3): Linear(in_features=768, out_features=1, bias=True)
        (attention_fusion): Sequential(
          (0): Linear(in_features=3, out_features=1, bias=True)
          (1): Sigmoid()
        )
      )
      (quad_dffs): QuadInputHierarchicalDFF(
        (stage1_triple_dff): TripleInputDirectDFF(
          (avg_pool1): AdaptiveAvgPool1d(output_size=1)
          (avg_pool2): AdaptiveAvgPool1d(output_size=2)
          (avg_pool4): AdaptiveAvgPool1d(output_size=4)
          (fc_atten1): Sequential(
            (0): Linear(in_features=2304, out_features=2304, bias=False)
            (1): LayerNorm((2304,), eps=1e-05, elementwise_affine=True)
            (2): Sigmoid()
          )
          (fc_atten2): Sequential(
            (0): Linear(in_features=2304, out_features=2304, bias=False)
            (1): LayerNorm((2304,), eps=1e-05, elementwise_affine=True)
            (2): Sigmoid()
          )
          (fc_atten4): Sequential(
            (0): Linear(in_features=2304, out_features=2304, bias=False)
            (1): LayerNorm((2304,), eps=1e-05, elementwise_affine=True)
            (2): Sigmoid()
          )
          (input_weight_net): Sequential(
            (0): Linear(in_features=2304, out_features=768, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=768, out_features=3, bias=True)
            (3): Softmax(dim=-1)
          )
          (gate_fc): Sequential(
            (0): Linear(in_features=2304, out_features=2304, bias=False)
            (1): Sigmoid()
          )
          (gate_enhancement): Sequential(
            (0): Linear(in_features=2304, out_features=2304, bias=True)
            (1): Tanh()
          )
          (fc_redu): Sequential(
            (0): Linear(in_features=2304, out_features=768, bias=False)
            (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (2): ReLU(inplace=True)
          )
          (residual_fc1): Sequential(
            (0): Linear(in_features=768, out_features=768, bias=False)
            (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (residual_fc2): Sequential(
            (0): Linear(in_features=768, out_features=768, bias=False)
            (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (residual_fc3): Sequential(
            (0): Linear(in_features=768, out_features=768, bias=False)
            (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (residual_fusion): Sequential(
            (0): Linear(in_features=2304, out_features=768, bias=False)
            (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (fc1): Linear(in_features=768, out_features=1, bias=True)
          (fc2): Linear(in_features=768, out_features=1, bias=True)
          (fc3): Linear(in_features=768, out_features=1, bias=True)
          (attention_fusion): Sequential(
            (0): Linear(in_features=3, out_features=1, bias=True)
            (1): Sigmoid()
          )
        )
        (stage1_enhancement): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=768, out_features=192, bias=True)
          (4): ReLU(inplace=True)
          (5): Linear(in_features=192, out_features=768, bias=True)
          (6): Sigmoid()
        )
        (input4_preprocessing): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=768, out_features=768, bias=True)
          (4): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
        (cross_stage_attention): Sequential(
          (0): Linear(in_features=768, out_features=96, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=96, out_features=768, bias=True)
          (3): Sigmoid()
        )
        (adaptive_fusion_weight): Sequential(
          (0): Linear(in_features=1536, out_features=192, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=192, out_features=2, bias=True)
          (3): Softmax(dim=-1)
        )
        (stage2_dff): InnovativeDFF(
          (avg_pool1): AdaptiveAvgPool1d(output_size=1)
          (avg_pool2): AdaptiveAvgPool1d(output_size=2)
          (avg_pool3): AdaptiveAvgPool1d(output_size=4)
          (fc_atten1): Sequential(
            (0): Linear(in_features=1536, out_features=1536, bias=False)
            (1): Sigmoid()
          )
          (fc_atten2): Sequential(
            (0): Linear(in_features=1536, out_features=1536, bias=False)
            (1): Sigmoid()
          )
          (fc_atten3): Sequential(
            (0): Linear(in_features=1536, out_features=1536, bias=False)
            (1): Sigmoid()
          )
          (gate_fc): Sequential(
            (0): Linear(in_features=1536, out_features=1536, bias=False)
            (1): Sigmoid()
          )
          (fc_redu): Linear(in_features=1536, out_features=768, bias=False)
          (residual_fc): Linear(in_features=768, out_features=768, bias=False)
          (fc1): Linear(in_features=768, out_features=1, bias=True)
          (fc2): Linear(in_features=768, out_features=1, bias=True)
          (nonlin): Sigmoid()
        )
        (memory_input1): Linear(in_features=768, out_features=768, bias=False)
        (memory_input4): Linear(in_features=768, out_features=768, bias=False)
        (memory_fusion): Sequential(
          (0): Linear(in_features=1536, out_features=768, bias=False)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
        (global_context): Sequential(
          (0): Linear(in_features=768, out_features=384, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=384, out_features=768, bias=True)
          (3): Sigmoid()
        )
        (final_refinement): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          (2): ReLU(inplace=True)
          (3): Linear(in_features=768, out_features=768, bias=True)
          (4): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
        )
      )
      (gated_enhancement): GatedModalityEnhancement(
        (rgb_gating): ModalityGatingUnit(
          (cross_modal_attention): CrossModalAttentionGate(
            (q_proj): Linear(in_features=768, out_features=768, bias=False)
            (k_proj): Linear(in_features=768, out_features=768, bias=False)
            (v_proj): Linear(in_features=768, out_features=768, bias=False)
            (out_proj): Linear(in_features=768, out_features=768, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (channel_gate): Sequential(
            (0): Linear(in_features=768, out_features=192, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=192, out_features=768, bias=True)
            (3): Sigmoid()
          )
          (spatial_gate): Sequential(
            (0): Linear(in_features=1536, out_features=768, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=768, out_features=1, bias=True)
            (3): Sigmoid()
          )
          (feature_fusion): Sequential(
            (0): Linear(in_features=1536, out_features=1536, bias=True)
            (1): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
            (2): ReLU(inplace=True)
            (3): Linear(in_features=1536, out_features=768, bias=True)
            (4): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (adaptive_weight): Sequential(
            (0): Linear(in_features=1536, out_features=384, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=384, out_features=2, bias=True)
            (3): Softmax(dim=-1)
          )
        )
        (nir_gating): ModalityGatingUnit(
          (cross_modal_attention): CrossModalAttentionGate(
            (q_proj): Linear(in_features=768, out_features=768, bias=False)
            (k_proj): Linear(in_features=768, out_features=768, bias=False)
            (v_proj): Linear(in_features=768, out_features=768, bias=False)
            (out_proj): Linear(in_features=768, out_features=768, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (channel_gate): Sequential(
            (0): Linear(in_features=768, out_features=192, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=192, out_features=768, bias=True)
            (3): Sigmoid()
          )
          (spatial_gate): Sequential(
            (0): Linear(in_features=1536, out_features=768, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=768, out_features=1, bias=True)
            (3): Sigmoid()
          )
          (feature_fusion): Sequential(
            (0): Linear(in_features=1536, out_features=1536, bias=True)
            (1): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
            (2): ReLU(inplace=True)
            (3): Linear(in_features=1536, out_features=768, bias=True)
            (4): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (adaptive_weight): Sequential(
            (0): Linear(in_features=1536, out_features=384, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=384, out_features=2, bias=True)
            (3): Softmax(dim=-1)
          )
        )
        (tir_gating): ModalityGatingUnit(
          (cross_modal_attention): CrossModalAttentionGate(
            (q_proj): Linear(in_features=768, out_features=768, bias=False)
            (k_proj): Linear(in_features=768, out_features=768, bias=False)
            (v_proj): Linear(in_features=768, out_features=768, bias=False)
            (out_proj): Linear(in_features=768, out_features=768, bias=True)
            (dropout): Dropout(p=0.1, inplace=False)
          )
          (channel_gate): Sequential(
            (0): Linear(in_features=768, out_features=192, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=192, out_features=768, bias=True)
            (3): Sigmoid()
          )
          (spatial_gate): Sequential(
            (0): Linear(in_features=1536, out_features=768, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=768, out_features=1, bias=True)
            (3): Sigmoid()
          )
          (feature_fusion): Sequential(
            (0): Linear(in_features=1536, out_features=1536, bias=True)
            (1): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
            (2): ReLU(inplace=True)
            (3): Linear(in_features=1536, out_features=768, bias=True)
            (4): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (adaptive_weight): Sequential(
            (0): Linear(in_features=1536, out_features=384, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=384, out_features=2, bias=True)
            (3): Softmax(dim=-1)
          )
        )
        (global_coordination): GlobalCoordinationGate(
          (interaction_net): Sequential(
            (0): Linear(in_features=2304, out_features=1536, bias=True)
            (1): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
            (2): ReLU(inplace=True)
            (3): Linear(in_features=1536, out_features=768, bias=True)
            (4): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (balance_net): Sequential(
            (0): Linear(in_features=4608, out_features=768, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=768, out_features=3, bias=True)
            (3): Softmax(dim=-1)
          )
          (global_gate): Sequential(
            (0): Linear(in_features=768, out_features=192, bias=True)
            (1): ReLU(inplace=True)
            (2): Linear(in_features=192, out_features=1, bias=True)
            (3): Sigmoid()
          )
        )
      )
    )
  )
  (pool): AdaptiveAvgPool1d(output_size=1)
  (rgb_reduce): Sequential(
    (0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (1): Linear(in_features=1024, out_features=512, bias=True)
    (2): QuickGELU()
  )
  (nir_reduce): Sequential(
    (0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (1): Linear(in_features=1024, out_features=512, bias=True)
    (2): QuickGELU()
  )
  (tir_reduce): Sequential(
    (0): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (1): Linear(in_features=1024, out_features=512, bias=True)
    (2): QuickGELU()
  )
  (generalFusion): GeneralFusion(
    (r): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
    )
    (n): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
    )
    (t): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
    )
    (rn): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
    )
    (rt): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
    )
    (nt): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
    )
    (rnt): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=512, out_features=512, bias=True)
    )
    (moe): MoM(
      (experts): ModuleList(
        (0): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (1): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (2): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (3): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (4): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (5): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (6): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (7): ExpertHead(
          (expertHead): ModuleList(
            (0): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (1): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (2): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (3): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (4): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (5): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
            (6): Expert(
              (mlp): Sequential(
                (0): Linear(in_features=64, out_features=64, bias=True)
                (1): QuickGELU()
                (2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              )
            )
          )
        )
      )
      (gating_network): GatingNetwork(
        (gate): CrossAttention(
          (linear_re): Sequential(
            (0): Linear(in_features=3584, out_features=512, bias=True)
            (1): QuickGELU()
            (2): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (q_): Linear(in_features=512, out_features=512, bias=False)
          (k_): Linear(in_features=512, out_features=512, bias=False)
        )
      )
    )
    (ebblock_r): EBlock(
      (extra_conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (conv1): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
      (branches): ModuleList(
        (0): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)
          )
        )
        (1): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=1024)
          )
        )
        (2): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(9, 9), dilation=(9, 9), groups=1024)
          )
        )
      )
      (sca): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (sg1): SimpleGate()
      (conv3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (freq): FreMLP(
        (process1): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (ebblock_n): EBlock(
      (extra_conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (conv1): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
      (branches): ModuleList(
        (0): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)
          )
        )
        (1): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=1024)
          )
        )
        (2): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(9, 9), dilation=(9, 9), groups=1024)
          )
        )
      )
      (sca): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (sg1): SimpleGate()
      (conv3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (freq): FreMLP(
        (process1): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (ebblock_t): EBlock(
      (extra_conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (conv1): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
      (branches): ModuleList(
        (0): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)
          )
        )
        (1): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), groups=1024)
          )
        )
        (2): Branch(
          (branch): Sequential(
            (0): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(9, 9), dilation=(9, 9), groups=1024)
          )
        )
      )
      (sca): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (sg1): SimpleGate()
      (conv3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (freq): FreMLP(
        (process1): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
    (deformselect): DAttentionBaseline(
      (conv_offset): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1))
        (1): GELU(approximate='none')
        (2): Conv2d(512, 512, kernel_size=(4, 4), stride=(2, 2), groups=512)
        (3): GELU(approximate='none')
        (4): Conv2d(512, 2, kernel_size=(1, 1), stride=(1, 1), bias=False)
      )
      (proj_q): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (proj_k): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (proj_v): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (proj_out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      (proj_drop): Dropout(p=0.0, inplace=False)
      (attn_drop): Dropout(p=0.0, inplace=False)
    )
  )
  (classifier_moe): Linear(in_features=3584, out_features=155, bias=False)
  (bottleneck_moe): BatchNorm1d(3584, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (classifier_r): Linear(in_features=512, out_features=155, bias=False)
  (bottleneck_r): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (classifier_n): Linear(in_features=512, out_features=155, bias=False)
  (bottleneck_n): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (classifier_t): Linear(in_features=512, out_features=155, bias=False)
  (bottleneck_t): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
)
2025-05-26 19:01:43,187 DeMo INFO: number of parameters:224.246856
using soft triplet loss for training
label smooth on, numclasses: 155
2025-05-26 19:01:43,301 DeMo.train INFO: start training
/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/timm/models/helpers.py:7: FutureWarning: Importing from timm.models.helpers is deprecated, please import via timm.models
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.models", FutureWarning)
/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/timm/models/registry.py:4: FutureWarning: Importing from timm.models.registry is deprecated, please import via timm.models
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.models", FutureWarning)
/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/timm/models/layers/__init__.py:48: FutureWarning: Importing from timm.models.layers is deprecated, please import via timm.layers
  warnings.warn(f"Importing from {__name__} is deprecated, please import via timm.layers", FutureWarning)
/home/ma1/work/demorelated/DeMo/modeling/clip/clip.py:23: UserWarning: PyTorch version 1.7.1 or higher is recommended
  warnings.warn("PyTorch version 1.7.1 or higher is recommended")
/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.
  warnings.warn(
/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torchvision/transforms/transforms.py:329: UserWarning: Argument 'interpolation' of type int is deprecated since 0.13 and will be removed in 0.15. Please use InterpolationMode enum.
  warnings.warn(
2025-05-26 19:02:08,543 DeMo.train INFO: Epoch[1] Iteration[10/16] Loss: 10.559, Acc: 0.008, Base Lr: 6.65e-05
2025-05-26 19:02:11,533 DeMo.train INFO: Epoch 1 done. Time per batch: 1.937[s] Speed: 33.0[samples/s]
2025-05-26 19:02:11,537 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2025-05-26 19:02:11,537 DeMo.train INFO: Current is the ori feature testing!
2025-05-26 19:02:11,537 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The test feature is normalized
2025-05-26 19:02:39,855 DeMo.train INFO: Validation Results - Epoch: 1
2025-05-26 19:02:39,856 DeMo.train INFO: mAP: 14.5%
2025-05-26 19:02:39,856 DeMo.train INFO: CMC curve, Rank-1  :31.5%
2025-05-26 19:02:39,856 DeMo.train INFO: CMC curve, Rank-5  :52.3%
2025-05-26 19:02:39,856 DeMo.train INFO: CMC curve, Rank-10 :62.1%
2025-05-26 19:02:39,856 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2025-05-26 19:02:39,859 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2025-05-26 19:02:39,859 DeMo.train INFO: Current is the moe feature testing!
2025-05-26 19:02:39,859 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/ma1/work/demorelated/DeMo/utils/metrics.py:216: UserWarning: This overload of addmm_ is deprecated:
	addmm_(Number beta, Number alpha, Tensor mat1, Tensor mat2)
Consider using one of the following signatures instead:
	addmm_(Tensor mat1, Tensor mat2, *, Number beta, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1420.)
  distmat.addmm_(1, -2, qf, gf.t())
The test feature is normalized
2025-05-26 19:03:06,181 DeMo.train INFO: Validation Results - Epoch: 1
2025-05-26 19:03:06,181 DeMo.train INFO: mAP: 14.5%
2025-05-26 19:03:06,181 DeMo.train INFO: CMC curve, Rank-1  :33.5%
2025-05-26 19:03:06,181 DeMo.train INFO: CMC curve, Rank-5  :55.3%
2025-05-26 19:03:06,181 DeMo.train INFO: CMC curve, Rank-10 :63.5%
2025-05-26 19:03:06,181 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2025-05-26 19:03:06,184 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2025-05-26 19:03:06,184 DeMo.train INFO: Current is the [moe,ori] feature testing!
2025-05-26 19:03:06,184 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The test feature is normalized
2025-05-26 19:03:32,259 DeMo.train INFO: Validation Results - Epoch: 1
2025-05-26 19:03:32,259 DeMo.train INFO: mAP: 14.5%
2025-05-26 19:03:32,259 DeMo.train INFO: CMC curve, Rank-1  :31.3%
2025-05-26 19:03:32,259 DeMo.train INFO: CMC curve, Rank-5  :52.5%
2025-05-26 19:03:32,259 DeMo.train INFO: CMC curve, Rank-10 :62.1%
2025-05-26 19:03:32,259 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2025-05-26 19:03:40,836 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
2025-05-26 19:03:40,836 DeMo.train INFO: Best mAP: 14.5%
2025-05-26 19:03:40,836 DeMo.train INFO: Best Rank-1: 31.3%
2025-05-26 19:03:40,836 DeMo.train INFO: Best Rank-5: 52.5%
2025-05-26 19:03:40,836 DeMo.train INFO: Best Rank-10: 62.1%
2025-05-26 19:03:40,837 DeMo.train INFO: ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Traceback (most recent call last):
  File "train_net.py", line 84, in <module>
    do_train(
  File "/home/ma1/work/demorelated/DeMo/engine/processor.py", line 67, in do_train
    output = model(img, label=target, cam_label=target_cam, view_label=target_view)
  File "/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ma1/work/demorelated/DeMo/modeling/make_model.py", line 141, in forward
    RGB_cash, RGB_global, NI_cash, NI_global, TI_cash, TI_global = self.BACKBONE(x, cam_label=cam_label, view_label=view_label) #RGB_cash 是除了cls token之外的所有token的特征
  File "/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ma1/work/demorelated/DeMo/modeling/meta_arch.py", line 537, in forward
    x = self.base(x, cv_embed, modality)
  File "/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ma1/work/demorelated/DeMo/modeling/clip/model.py", line 1290, in forward
    x_rgb = self.transformer.resblocks[i](x_rgb, modality, i, None, prompt_sign=False, adapter_sign=False)
  File "/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ma1/work/demorelated/DeMo/modeling/clip/model.py", line 403, in forward
    return self.forward_ori(x)
  File "/home/ma1/work/demorelated/DeMo/modeling/clip/model.py", line 229, in forward_ori
    x = x + self.mlp(self.ln_2(x))
  File "/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/ma1/anaconda3/envs/DeMo/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ma1/work/demorelated/DeMo/modeling/clip/model.py", line 165, in forward
    return x * torch.sigmoid(1.702 * x)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 50.00 MiB (GPU 0; 79.15 GiB total capacity; 13.34 GiB already allocated; 50.38 MiB free; 13.87 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
